diff --git a/Makefile b/Makefile
index 09d790c..0622fb0 100644
--- a/Makefile
+++ b/Makefile
@@ -51,7 +51,7 @@ TOOLPREFIX := $(shell if i386-jos-elf-objdump -i 2>&1 | grep '^elf32-i386$$' >/d
 endif
 
 # If the makefile can't find QEMU, specify its path here
-# QEMU = qemu-system-i386
+QEMU = /usr/libexec/qemu-kvm
 
 # Try to infer the correct QEMU
 ifndef QEMU
@@ -181,6 +181,8 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+	_ps\
+	_st\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -249,6 +251,7 @@ qemu-nox-gdb: fs.img xv6.img .gdbinit
 
 EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
+	ps.c st.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
 	printf.c umalloc.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
diff --git a/defs.h b/defs.h
index 82fb982..a62a89e 100644
--- a/defs.h
+++ b/defs.h
@@ -120,6 +120,8 @@ void            userinit(void);
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
+int 		        getpinfo(void);
+int		          settickets(int pid, int tickets);
 
 // swtch.S
 void            swtch(struct context**, struct context*);
diff --git a/proc.c b/proc.c
index 806b1b1..e34e5c5 100644
--- a/proc.c
+++ b/proc.c
@@ -112,6 +112,11 @@ found:
   memset(p->context, 0, sizeof *p->context);
   p->context->eip = (uint)forkret;
 
+  // initialize struct p process state for scheduler
+  p->tickets = 1;
+  p->priority = 1;
+  p->high_tics = 0;
+  p->low_tics = 0;
   return p;
 }
 
@@ -311,6 +316,39 @@ wait(void)
   }
 }
 
+// Return a integer between 0 and ((2^32 - 1) / 2), which is 2147483647.
+uint
+random(void)
+{
+  // Take from http://stackoverflow.com/questions/1167253/implementation-of-rand
+  static unsigned int z1 = 12345, z2 = 12345, z3 = 12345, z4 = 12345;
+  unsigned int b;
+  b  = ((z1 << 6) ^ z1) >> 13;
+  z1 = ((z1 & 4294967294U) << 18) ^ b;
+  b  = ((z2 << 2) ^ z2) >> 27; 
+  z2 = ((z2 & 4294967288U) << 2) ^ b;
+  b  = ((z3 << 13) ^ z3) >> 21;
+  z3 = ((z3 & 4294967280U) << 7) ^ b;
+  b  = ((z4 << 3) ^ z4) >> 12;
+  z4 = ((z4 & 4294967168U) << 13) ^ b;
+
+  return (z1 ^ z2 ^ z3 ^ z4) / 2;
+}
+
+// Return a random integer between a given range.
+int
+randomrange(int lo, int hi)
+{
+  if (hi < lo) {
+    int tmp = lo;
+    lo = hi;
+    hi = tmp;
+  }
+  int range = hi - lo + 1;
+  return random() % (range) + lo;
+}
+
+
 //PAGEBREAK: 42
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
@@ -322,19 +360,119 @@ wait(void)
 void
 scheduler(void)
 {
+
   struct proc *p;
   struct cpu *c = mycpu();
+  uint total_tics = 1;
   c->proc = 0;
   
-  for(;;){
+  for(;;) {
     // Enable interrupts on this processor.
     sti();
 
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
+
+    // Check odd time slices for low priority processes
+    int next_process_flag = 0;
+
+    // Loop processes and check low priority tics
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
+        if(p->state != RUNNABLE)
+          continue;
+        if (p->low_tics % 2 == 1)
+        {
+          c->proc = p;
+          switchuvm(p);
+          p->state = RUNNING;
+
+          swtch(&(c->scheduler), p->context);
+          switchkvm();
+
+          // Process is done running for now.
+          // It should have changed its p->state before coming back.
+          c->proc = 0;
+          p->low_tics += 1;
+
+          // increment total time
+          total_tics += 1;
+          next_process_flag = 1;
+          release(&ptable.lock);
+          break;
+        }
+      }
+    if (next_process_flag == 1) continue;
+    
+
+    // RULE 5: move all jobs in the system to top priority after some time S
+    if (total_tics % 1000 == 0 ) 
+    {
+      for(p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
+        if(p->state != RUNNABLE) continue;
+        p->priority = 1;
+        p->low_tics = 0;
+        p->high_tics = 0;
+      }
+    
+    }
+
+    int total_low_tickets = 0;
+    int total_high_tickets = 0;
+    int ticket_counter = 0;
+    
+    // counting the total tickets
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->state != RUNNABLE)
-        continue;
+      if (p->state != RUNNABLE) continue;
+      if (p->priority == 1) total_high_tickets += p->tickets;
+      if (p->priority == 0) total_low_tickets += p->tickets;
+    }
+    
+    if (total_high_tickets + total_low_tickets > 0) {
+      // if there are no high priority processes left...
+      if (total_high_tickets == 0)
+      {
+        // generate a random winning ticket
+        int winning_low_value = randomrange(0, total_low_tickets);
+
+        // find winning process
+        for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+          if(p->state != RUNNABLE)
+            continue;
+          ticket_counter += p->tickets;
+          if(ticket_counter >= winning_low_value)
+          {
+            p->low_tics += 1;
+            break;
+          }
+        }
+
+      }
+      else
+      {
+        // generate a random winning ticket
+        int winning_high_value = randomrange(0, total_high_tickets);
+
+        // find winning process
+        for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+          if(p->state != RUNNABLE) continue;
+          ticket_counter += p->tickets;
+          if(ticket_counter >= winning_high_value)
+          {
+            p->high_tics += 1;
+            // process time threshold
+            if(p->high_tics >= 10 )
+            {
+              // reset tics
+              p->priority = 0;
+              p->low_tics = 0;
+              p->high_tics = 0;
+            }
+            break;
+          }
+        }
+
+      }
+
 
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
@@ -349,6 +487,9 @@ scheduler(void)
       // Process is done running for now.
       // It should have changed its p->state before coming back.
       c->proc = 0;
+
+      // increment total time
+      total_tics += 1;
     }
     release(&ptable.lock);
 
@@ -532,3 +673,40 @@ procdump(void)
     cprintf("\n");
   }
 }
+
+int
+getpinfo()
+{
+struct proc *p;
+//Enables interrupts on this processor.
+sti();
+
+//Loop over process table looking for process with pid.
+acquire(&ptable.lock);
+cprintf("name \t pid \t state \t priority \t tickets \n");
+for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+  if(p->state == SLEEPING)
+	  cprintf("%s \t %d \t SLEEPING \t %d \t %d \n", p->name,p->pid,p->priority, p->tickets);
+	else if(p->state == RUNNING)
+ 	  cprintf("%s \t %d \t RUNNING \t %d \t %d \n", p->name,p->pid,p->priority, p->tickets);
+	else if(p->state == RUNNABLE)
+ 	  cprintf("%s \t %d \t RUNNABLE \t %d \t %d \n", p->name,p->pid,p->priority, p->tickets);
+}
+release(&ptable.lock);
+return 22;
+}
+
+int 
+settickets(int pid, int tickets)
+{
+	struct proc *p;
+	acquire(&ptable.lock);
+	for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+	  if(p->pid == pid){
+			p->tickets = tickets;
+			break;
+		}
+	}
+	release(&ptable.lock);
+	return pid;
+}
diff --git a/proc.h b/proc.h
index 1647114..de8b42d 100644
--- a/proc.h
+++ b/proc.h
@@ -49,6 +49,10 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int tickets;
+  int priority;
+  int high_tics;
+  int low_tics;
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/ps.c b/ps.c
new file mode 100644
index 0000000..6669d3e
--- /dev/null
+++ b/ps.c
@@ -0,0 +1,9 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "fcntl.h"
+
+int main(void){
+  getpinfo();
+  exit();
+}
diff --git a/st.c b/st.c
new file mode 100644
index 0000000..2522d58
--- /dev/null
+++ b/st.c
@@ -0,0 +1,23 @@
+
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "fcntl.h"
+
+int
+main(int argc, char *argv[])
+{
+  int tickets, pid;
+  if(argc < 3){
+    printf(2,"set tickets: arg1=pid arg2=ticket number\n");
+    exit();
+  }
+  pid = atoi(argv[1]);
+  tickets = atoi(argv[2]);
+  if (tickets < 0 || tickets > 100){
+    printf(2,"Invalid ticket: choose from 0-100\n");
+    exit();
+  }
+  settickets(pid, tickets);
+  exit();
+}
\ No newline at end of file
diff --git a/syscall.c b/syscall.c
index ee85261..cc16bfc 100644
--- a/syscall.c
+++ b/syscall.c
@@ -103,6 +103,8 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_getpinfo(void);
+extern int sys_settickets(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +128,8 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_getpinfo]    sys_getpinfo,
+[SYS_settickets]    sys_settickets,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index bc5f356..ab66adc 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_getpinfo 22
+#define SYS_settickets 23
diff --git a/sysproc.c b/sysproc.c
index 0686d29..052106d 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -89,3 +89,22 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+int
+sys_getpinfo(void)
+{
+  return getpinfo();
+}
+
+
+int
+sys_settickets(void)
+{
+  int pid, tickets;
+  if(argint(0, &pid) < 0)
+    return -1;
+  if(argint(1, &tickets) < 0)
+    return -1;
+
+  return settickets(pid, tickets);
+}
\ No newline at end of file
diff --git a/user.h b/user.h
index 4f99c52..a402f42 100644
--- a/user.h
+++ b/user.h
@@ -23,6 +23,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int getpinfo(void);
+int settickets(int pid, int tickets);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/usys.S b/usys.S
index 8bfd8a1..da1037d 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,5 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(getpinfo)
+SYSCALL(settickets)
